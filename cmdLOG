## cd to base directory wD 
## copy requiredFiles.tgz that contains required data files that cannot be hosted on github to wD directory
# Extract archive
tar -zxvf requiredFiles.tgz

# move sequences database file to BLASTDB directory
mv requiredFiles/RotaVDB BLASTDB/

# move Metadata to base directory
mv requiredFiles/Metadata.xml ./

# move worldcities.csv to base directory
mv requiredFiles/worldcities.csv ./

# move shapefile archive to shapefiles directory
mv requiredFiles/ne_110m_admin_0_countries.zip shapefiles/

# cd into shapefiles directory then extract ne_110m_admin_0_countries.zip
cd shapefiles/;unzip ne_110m_admin_0_countries.zip

# remove ne_110m_admin_0_countries.zip after extraction
rm ne_110m_admin_0_countries.zip

# cd to wD before docker image building
cd ../

# build and docker image name bmrserver
sudo docker build -t bmrserver:latest .

####################################################################################
# ## If building image with Dockerfile failed then use archived image file instead
# ## Extract docker image archive bmrserver.tar.gz ## The archived image store in requiredFiles in sharepoint link
# gunzip bmrserver.tar.gz
# ## use docker archive   
# docker load -i bmrserver.tar
####################################################################################


# test an image
sudo docker run --rm -it -v $(pwd):/wD bmrserver blastn -h

# create NCBI blast database from RotaVDB file with tools inside docker image bmrserver
sudo docker run --rm -it -v $(pwd):/wD bmrserver bash -c 'cd /wD/BLASTDB;makeblastdb -dbtype nucl -parse_seqids -in RotaVDB'

# run server: listen to port 8080 on the host
sudo docker run --rm -it -v $(pwd):/wD -p 8080:8080 bmrserver python3 /wD/serverJ.py

##
## Test accessing api from other machine with curl
## Change 20.0.0.8 to host machine's ip
## curl -X POST -F "file=@X.fasta" http://20.0.0.8:8080/generate-svg -o occurrence_map.svg 
## The output should saved to occurrence_map.svg
##  curl -X POST  "http://0.0.0.0:8080/grepfield-map?grep=A17&field=SubName&num=100&map=1" -o x.html
##
##   USING CURL FOR CALLING MAP GENERATING API 
##       CREATING MAP FROM CSV FILE
##        input.csv file Example 
##      (PlaceName,Lat,Lon,Time)
##      India,28.6100,77.2300,1196467200
##      Taiwan,24.1439,120.6794,1199145600
##      Thailand,13.7525,100.4942,1361059200
##
## curl -X POST -F "file=@input.csv"  "http://20.0.0.8:8080/generate-html0" -o csv.html
##  -F "file=@input.csv" : send input.csv to server
##  -o csv.html : indicate csv.html as output html file
##
##       SEARCHING WITH KEYWORD
## curl -X POST  "http://0.0.0.0:8080/grepfield-map?field=SubName&grep=A120&num=10000&map=2" -o ~/Downloads/worldmap.html
##   http://0.0.0.0:8080/grepfield-map : API path 
##   grep=A120 : search string "A120"
##   field=SubName : search in field SubName
##   num=10000 : limit search result to 10000 records
##   -o ~/Downloads/worldmap.html : save html with svg image output to file name "worldmap.html"
## 
##      SEARCHING WITH FASTA FILE
## curl -X POST -F "file=@EnteroTest.fasta" http://20.0.0.8:8080/generate-html -o occurrence_map.html
## http://20.0.0.8:8080/generate-html : API path
## "file=@EnteroTest.fasta" send fasta file "EnteroTest.fasta" to API for sequence searching
## -o occurrence_map.html : save responsed html file to occurrence_map.html
